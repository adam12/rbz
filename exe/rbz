#!/usr/bin/env ruby

require "rubygems/package"
require "stringio"
require "zlib"
require "optionparser"
require "erb"

options = {
  main: "main.rb",
  output: $stdout
}

parser = OptionParser.new do |parser|
  parser.accept(File) do |path|
    abort "Error: #{path} already exists" if File.exist?(path)
    f = File.open(path, mode: "w")
    File.chmod(0o755, path)
    f
  end

  parser.banner = "Usage: rbz [options] folder"
  parser.on("-c", "--compile", "Store compiled Ruby iseq")
  parser.on("-m FILE", "--main FILE", "Main entrypoint")
  parser.on("-o FILE", "--output FILE", File, "Output path (default: stdout)")
  parser.on("--verbose", "Verbose mode")
end
parser.parse!(into: options)

source = ARGV[0] or abort(parser.to_s)
output = options[:output]
io = StringIO.new

Gem::Package::TarWriter.new(io) do |writer|
  Dir.chdir(source) do
    Dir.glob("**/*").each do |e|
      next if File.directory?(e)
      mode = File.lstat(e).mode

      if options[:compile] && File.extname(e) == ".rb"
        contents = RubyVM::InstructionSequence.compile_file(e).to_binary
        $stderr.puts "a #{e}.iseq" if options[:verbose] # standard:disable Style/StderrPuts
        writer.add_file(e + ".iseq", mode) { |fio| fio.write(contents) }
      end

      $stderr.puts "a #{e}" if options[:verbose] # standard:disable Style/StderrPuts
      writer.add_file(e, mode) { |fio| fio.write(File.binread(e)) }
    end
  end
end

output.puts ERB.new(File.read(__FILE__).split("__END__").last.strip, trim_mode: "-").result(binding)
output.puts
output.puts "__END__"
output.puts [Zlib::Deflate.deflate(io.string)].pack("m")

__END__

#!/usr/bin/env ruby
require "tmpdir"
require "rubygems/package"
require "stringio"
require "zlib"

<% if options[:compile] -%>
module ISeqMixin
  def load_iseq(path)
    if File.exist?(path + ".iseq")
      path = path + ".iseq"
      RubyVM::InstructionSequence.load_from_binary(File.binread(path))
    end
  rescue SyntaxError, RuntimeError
    nil
  end
end
<% end -%>

Dir.mktmpdir("rbz") do |dir|
  Dir.chdir(dir) do
    tar = StringIO.new(Zlib::Inflate.inflate(DATA.read.unpack1("m")))
    Gem::Package::TarReader.new(tar) do |reader|
      reader.each do |entry|
        next if entry.full_name.start_with?("._")
        next if entry.full_name.start_with?("PaxHeader")

        FileUtils.mkdir_p(File.dirname(entry.full_name))
        File.binwrite(entry.full_name, entry.read)
        File.chmod(entry.header.mode, entry.full_name)
      end
    end

    <% if options[:compile] %>
    class << RubyVM::InstructionSequence
      prepend ISeqMixin
    end
    <% end -%>

    load File.expand_path("<%= options[:main] %>", dir)
  end
end
